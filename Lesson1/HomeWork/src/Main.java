public class Main {
// Реализовать, с учетом ооп подхода, приложение Для проведения исследований с генеалогическим древом.
// Идея: описать некоторое количество компонент, например: модель человека компонента хранения связей и отношений между людьми: родитель, ребёнок - классика,
// но можно подумать и про отношение, брат, свекровь, сестра и т. д. компонент для проведения исследований дополнительные компоненты, например отвечающие за вывод данных в консоль,
// загрузку и сохранения в файл, получение\построение отдельных моделей человека Под “проведением исследования” можно понимать получение всех детей выбранного человека.
// Описать с ООП стиле, логику взаимодействия объектов реального мира между собой: шкаф-человек.
// Какие члены должны быть у каждого из классов (у меня на семинаре студенты пришли к тому, чтобы продумать логику взаимодействия жена разрешает открыть дверцу шкафа мужу, после чего эту дверцу можно открыть)
// Подумать как описать логику взаимодействия человека и домашнего питомца.
// Сценарий: “Человек “зовёт” котика “кис-кис”, котик отзывается.
// Какое ещё взаимодействие может быть?
// Продумать какие проблемы могут возникнуть в том, коде, который они написали.
// Например в первой задаче (с генеалогическим древом) мы можем знать о двух людях, но не знаем в каких “отношениях” они были - двоюродные или троюродные,
// или мы точно знаем как звали прапрабабушку, но совершенно не знаем прабабушку - как хранить такие связи или что будет если в компоненту обхода передать ссылку на null-дерево.
// У задач нет единственного правильного решения

    public static void main(String[] args) {
        Person p1 = new Person("Галя", 16, "Ж");
        Person p2 = new Person("Валя", 24, "Ж");
        Person p3 = new Person("Петя", 25, "М");
        Person p4 = new Person("Жора", 65, "М");
        Person p5 = new Person("Витя", 17, "М");
        p1.setParents(p2);
        p3.setChild(p1);
        p4.setGrandChild(p1);
        p4.setChild(p3);
        p5.setBrother(p1);
        System.out.println(p1.printAllFamily());
        p1.writFamilyInFile();
        p1.setBrother(null);
        System.out.println(p3.getChild());
        System.out.println(p4.getChild());
        System.out.println(p1.getParents());
        System.out.println(p3.getParents());
        System.out.println(p1.getBrother());
        p1.printAllFamily();
        Closet blueCloset = new Closet(10,10,"Blue");
        p3.openCloset(blueCloset);
        p2.openClosetLock(blueCloset);
        p1.openCloset(blueCloset);
        Cat cat1 = new Cat("Barsik", 5);
        p1.sayKsks(cat1);
    }
}
